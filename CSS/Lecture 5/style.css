/* CSS FlexBox - Flexbox is a great way to get more flexibility in your layouts and to simplify responsive layout design.
It makes it easy to align elements on a 2D plane and is pretty easy to use once you get familiar with the main properties.*/

/* The first step is to set display flex on a "container" element.
The "childre" to flex container become flex items.
A set of properties can be applied to flex items and have their effect on the targeted items.
Flex items can in turn also be flex containers for the elements for the elements it contains, making it easy to create complex layouts.*/

/* box-sizing:border-box ise use krne se agar hum border ya padding apply krte hain to hamara content ka box chhota ho jata hain total dimention of the block remain same rhta hain*/

/* flexbox me bs do axis hote hain 1.main-axis(Horizental line) and 2.cross-axis(Vertical line) */

/* flex me by default "main-axis" Horizental aur "cross-axis" Vertical hota hain. */

/* Flex ki direction by default horizental(row wise) hoti hain, use vartical(column wise) krne ke liye flex-direction me column likhna padega.*/

/* justify-content apke "main-exis" ke upar align(categorize ya separate krta hain elements ya items ko) krta hain items ko*/

/* align-items ye "cross-axis"(means vertical align krti hain items ko) ke upar items ko align krta hain*/

/* items ke bich me gap krne ke liye "gap" ka use krte hain aur ye ek shorthand notation hain 
ye by default row and column dono me lgta hain aur ise hum row-gap(row wise gap) and column-gap(column wise gap) de skte hain indivitual wise */

/* align-content se hum do rows ya multiple rows ke bich me gap ya space krne ke liye align-content ka use krte hain */

/* Flex-container(Parent) Properties - The flex container becomes flexible by setting the display property to flex:
  . Flex-direction - row,row-reverse and column,column-reverse
  . Flex-wrap - wrap,nowrap,wrap-reverse (bydefault nowrap krta hain)
  . Flex-flow - ye ek shorthand notation hoti hain (means flex-direction and flex-wrap dono ko ek hi link me likh skte hain)
  . Justify-content - flex-start, flex-end, center, space-around, space-between, space-evenly
  . align-items - flex-start, flex-end, center, stretch(bydefault align-items stretch rhti hain), baseline (ise use krne pr sare content ki baseline ek sidhi rekha me aati hain)
  . align-content - flex-start, flex-end, center, space-between, space-around, space-evenly
*/

/* Flex-items(Child) Properties - The direct child element of a flex container automatically becomes flexible (flex) items.
  . Order - isse hum item ki ordering krte hain iski ordering by default 0(zero) hoti hain
  . Flex-grow - iski value by default 0(zero) hoti hain aur isse hum items ko grow kr skte hain ek sath aur individual bhi
  . Flex-shrink - iski value by default 1 hoti hain isse items shrink hote hain ise bhi ek sath sb br lga skte hain ya individual bhi lga skte hain
  . Flex-basis - ye items ko width dene ke liye use hota hain aur Flex-basis ki width aur width dono hi cases me exactly same hi width hoti hain aur content ke basis pe dono different hote hain aur isme "px" ki jagah hum "percentage(%)" bhi use kr skte hain
  . Flex - ye ek shorthand notation hain, isse hum ek sath (order,flex-grow,flex-shrink,flex-basis) charo items ko use kr skte hain (exam - flex : 3 4 2 120px)
  . Align-self - using this only one item align
*/

/* Flex-container Properties */

/* .container{
    height: 400px;
    border: 4px solid green;
    display: flex; */
    /* flex-direction: column-reverse; */
    /* flex-wrap: wrap; */
    /* flex-flow: row wrap; */
    /* justify-content: flex-start;
    justify-content: flex-end; */
    /* justify-content: center; */
    /* justify-content: space-around;
    justify-content: space-between;
    justify-content: space-evenly; */
    /* align-items: flex-start;
    align-items: flex-end; */
    /* align-items: center; */
    /* align-items: stretch;
    align-items: baseline; */
    /* gap: 20px; */
    /* align-content: flex-start; */
    /* align-content: flex-end; */
    /* align-content: center; */
    /* align-content: space-between; */
    /* align-content: space-around; */
    /* align-content: space-evenly; */
/* }
.box{
    border: 2px solid brown;
    background-color: aqua;
    width: 300px;
} */

/* Flex-items Properties */

/* *{
  box-sizing: border-box;
} */

.container{
  height: 400px;
  border: 2px solid green;

  display: flex;
  flex-direction: row;
  /* flex-wrap: wrap; */

  /* flex-flow: column nowrap; */

  justify-content: center;

  align-items: center;

  align-content: flex-start;

  /* gap: 20px; */
}

.box{
  border: 1px solid brown;
  background-color: aqua;
  width: 100px;
  /* flex-grow: 1; */
  /* flex-shrink: 4; */
  flex-basis: 100px;
}

#box1{
  order: 1;
  /* flex-grow: 1; */
  /* flex-shrink: 4; */
  align-self: flex-start;
}

#box3{
  order: 8;
  /* flex-grow: 1; */
  /* flex-shrink: 2; */
  align-self: flex-end;
}

#box2{
  order: 3;
  align-self: stretch;
}